apiVersion: v1
kind: ServiceAccount
metadata:
  name: filebeat
  namespace: kube-system
  labels:
    k8s-app: filebeat

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: test-log
  namespace: kube-system
data:
  test.log: |
    {"time_local": "18/May/2023:21:59:15 +0000","request_id": "867cbb2c7e3be106085c039024a9dca3","client_user": "","client_ip": "85.10.195.146","http_request_scheme": "http","client_request_method": "GET","client_request_host": "testnewsite2.com","http_response_code": 444,"reply_length_bytes": 0,"cache_result": "","http_request_version": "HTTP/1.1","referer": "","client_ua": "python-requests/2.20.0","client_url": "/","querystring": "","proxy_host": "","proxy_port": "","content_type": "","request_time": 0.000,"forwardedfor": "","loc_in": "","loc_out": "","upstream_addr": "","upstream_status": "","upstream_response_time": "","upstream_header_time": "","upstream_connect_time": "","upstream_bytes_sent": "","upstream_bytes_received": "","banjax_decision": "-","banjax_error":"-","disable_logging": 0,"cookie_deflect_challenge2": "","cookie_deflect_password2": ""}

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: filebeat
  labels:
    k8s-app: filebeat
rules:
- apiGroups: [""] # "" indicates the core API group
  resources:
  - namespaces
  - pods
  - nodes
  verbs:
  - get
  - watch
  - list
- apiGroups: ["apps"]
  resources:
    - replicasets
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources:
    - jobs
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: filebeat
  # should be the namespace where filebeat is running
  namespace: kube-system
  labels:
    k8s-app: filebeat
rules:
  - apiGroups:
      - coordination.k8s.io
    resources:
      - leases
    verbs: ["get", "create", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: filebeat-kubeadm-config
  namespace: kube-system
  labels:
    k8s-app: filebeat
rules:
  - apiGroups: [""]
    resources:
      - configmaps
    resourceNames:
      - kubeadm-config
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: filebeat
subjects:
- kind: ServiceAccount
  name: filebeat
  namespace: kube-system
roleRef:
  kind: ClusterRole
  name: filebeat
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: filebeat
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: filebeat
    namespace: kube-system
roleRef:
  kind: Role
  name: filebeat
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: filebeat-kubeadm-config
  namespace: kube-system
subjects:
  - kind: ServiceAccount
    name: filebeat
    namespace: kube-system
roleRef:
  kind: Role
  name: filebeat-kubeadm-config
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: filebeat-config
  namespace: kube-system
  labels:
    k8s-app: filebeat
data:
  filebeat.yml: |-
    filebeat.inputs:
    - type: filestream
      id: deflect_access
      ignore_inactive: since_first_start
      parsers:
        - ndjson:
            keys_under_root: false
      paths:
        - /usr/share/filebeat/test.log
      fields:
        dnet: "XXX"
        type: deflect_access
        log_topic: filebeat_deflect_access
        log_topic: filebeat_banjax

    output.kafka:
      hosts: ["kafka-0.kafka-headless.default.svc.cluster.local:9093","kafka-1.kafka-headless.default.svc.cluster.local:9093","kafka-2.kafka-headless.default.svc.cluster.local:9093"]
      ssl.enabled: false
      topic: 'anton7'
      key: '%{[json.client_request_host]}'
      partition.hash:
        hash: []
      required_acks: 1
      reachable_only: true
      compression: gzip
      max_message_bytes: 1000000


    logging.level: "DEBUG"
---

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: filebeat
  namespace: kube-system
  labels:
    k8s-app: filebeat
spec:
  selector:
    matchLabels:
      k8s-app: filebeat
  template:
    metadata:
      labels:
        k8s-app: filebeat
    spec:
      serviceAccountName: filebeat
      terminationGracePeriodSeconds: 30
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - name: filebeat
        image: docker.elastic.co/beats/filebeat:8.8.0
        args: [
          "-c", "/etc/filebeat.yml",
          "-e",
        ]
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        securityContext:
          runAsUser: 0
          # If using Red Hat OpenShift uncomment this:
          #privileged: true
        resources:
          limits:
            memory: 200Mi
          requests:
            cpu: 100m
            memory: 100Mi
        volumeMounts:
        - name: config
          mountPath: /etc/filebeat.yml
          readOnly: true
          subPath: filebeat.yml
        - name: test-log
          mountPath: /usr/share/filebeat/test.log
          readOnly: true
          subPath: test.log
        - name: data
          mountPath: /usr/share/filebeat/data
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
        - name: varlog
          mountPath: /var/log
          readOnly: true
      volumes:
      - name: config
        configMap:
          defaultMode: 0640
          name: filebeat-config
      - name: test-log
        configMap:
          name: test-log
      - name: varlibdockercontainers
        hostPath:
          path: /var/lib/docker/containers
      - name: varlog
        hostPath:
          path: /var/log
      # data folder stores a registry of read status for all files, so we don't send everything again on a Filebeat pod restart
      - name: data
        hostPath:
          # When filebeat runs as non-root user, this directory needs to be writable by group (g+w).
          path: /var/lib/filebeat-data
          type: DirectoryOrCreate
---